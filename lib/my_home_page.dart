import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:thanh/music_chart.dart';
import 'app_colors.dart';
import 'play_music.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'audio_manager.dart';
import 'mini_player.dart';
import 'search_page.dart';

// H√†m chuy·ªÉn HEX sang Color (ƒë·∫∑t ·ªü ƒë·∫ßu file)
Color hexToColor(String hex) {
  hex = hex.replaceAll('#', '').replaceAll('0x', '').trim();
  if (hex.length == 6) hex = 'FF$hex'; // Th√™m alpha n·∫øu thi·∫øu
  return Color(int.parse(hex, radix: 16));
}

//ƒê√¢y l√† widget g·ªëc (root widget)
class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    //MaterialApp l√† widget bao ngo√†i to√†n b·ªô app
    return MaterialApp(
      title: 'My Music_App',
      debugShowCheckedModeBanner: false,
      //Ch·ªß ƒë·ªÅ c·ªßa app, ƒë·ªãnh nghƒ©a m√†u s·∫Øc, ki·ªÉu ch·ªØ
      theme: ThemeData.light().copyWith(
        scaffoldBackgroundColor: Colors.white,
        cardColor: Colors.white,
      ),
      home: const MyHomePage(title: 'Th√†nh'),
    );
  }
}

// M√†n h√¨nh ch√≠nh c·ªßa ·ª©ng d·ª•ng
//StatefulWidget c√≥ tr·∫°ng th√°i
// l√† c√°i g·ªëc c·ªßa app => t·ª´ ƒë√¢y m·ªü r·ªông ra
class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState(); //tr·∫£ v·ªÅ 1 l·ªõp state ƒë·ªÉ g·∫Øn v·ªõi widget _MyHomePageState()
}

class _SliverHeaderDelegate extends SliverPersistentHeaderDelegate {
  final Widget child;
  final double minHeight;
  final double maxHeight;

  _SliverHeaderDelegate({
    required this.child,
    required this.minHeight,
    required this.maxHeight,
  });

  @override
  Widget build(
    BuildContext context,
    double shrinkOffset,
    bool overlapsContent,
  ) {
    return SizedBox.expand(child: child);
  }

  @override
  double get minExtent => minHeight;

  @override
  double get maxExtent => maxHeight;

  @override
  bool shouldRebuild(covariant _SliverHeaderDelegate oldDelegate) {
    return oldDelegate.child != child ||
        oldDelegate.minHeight != minHeight ||
        oldDelegate.maxHeight != maxHeight;
  }
}

//_MyHomepageState Ph·∫ßn logic x·ª≠ l√Ω tr·∫°ng th√°i
//with SingleTickerProviderStateMixin//th√†nh ph·∫ßn ƒëi·ªÅu khi·ªÉn th·ªùi gian cho c√°c animation
//B·∫Øt bu·ªôc n·∫øu s·ª≠ d·ª•ng AnimationController,TabController, vsycn
class _MyHomePageState extends State<MyHomePage>
    with SingleTickerProviderStateMixin {
  int _selectedIndex =
      0; //c√°ch Flutter bi·∫øt ng∆∞·ªùi d√πng ƒëang b·∫•m v√†o tab n√†o, t·ª´ ƒë√≥ hi·ªÉn th·ªã ƒë√∫ng trang t∆∞∆°ng ·ª©ng.
  List<dynamic> _songs = []; // danh s√°ch ch·ª©a t·∫•t c·∫£ b√†i h√°t
  final _player = AudioManager().player; // ‚úÖ
  bool _isPlaying = false;
  int _currentIndex = 0; // b√†i ƒë·∫ßu ti√™n trong danh s√°ch
  List<Map<String, dynamic>> playlist = []; // danh s√°ch b√†i h√°t
  List<Map<String, dynamic>> selectedSongs = [];
  final manager = AudioManager();
  late ScrollController _scrollController;
  late TabController _tabController;

  String? selectedCategory;
  Future<List<Map<String, dynamic>>>? _songsFuture;
  Map<String, List<Map<String, dynamic>>> _groupedSongs = {};
  List<String> _categories = [];

  // void _onItemTapped(int index) {
  //   setState(() {
  //     _selectedIndex = index;
  //   });
  // }
  Map<String, List<Map<String, dynamic>>> groupSongsByCategory(
    List<Map<String, dynamic>> songs,
  ) {
    final Map<String, List<Map<String, dynamic>>> grouped = {};

    for (var song in songs) {
      final category = song['category']?.toString().trim();
      if (category != null && category.isNotEmpty) {
        grouped[category] = grouped[category] ?? [];
        grouped[category]!.add(song);
      }
    }

    return grouped;
  }

  //Chuy·ªÉn ƒë·ªïi gi·ªØa tr·∫°ng th√°i ‚Äúƒëang ph√°t‚Äù v√† ‚Äút·∫°m d·ª´ng‚Äù
  void togglePlayPause() {
    if (_player.playing) {
      _player.pause(); // N·∫øu ƒëang ph√°t th√¨ t·∫°m d·ª´ng
    } else {
      _player.play(); // N·∫øu ƒëang t·∫°m d·ª´ng th√¨ ph√°t ti·∫øp
    }
  }

  //Chuy·ªÉn sang ph√°t b√†i h√°t k·∫ø ti·∫øp trong danh s√°ch nh·∫°c
  // l√† 1 h√†m kh√¥ng tr·∫£ v·ªÅ gi√° tr·ªã, d√πng ƒë·ªÉ x·ª≠ l√Ω logic, chuy·ªÉn b√†i
  void playNext() {
    // (_currentIndex + 1) % playlist.length:
    // N·∫øu ƒëang ·ªü cu·ªëi (v√≠ d·ª•: 4 + 1 = 5, 5 % 5 = 0) ‚Üí quay l·∫°i b√†i ƒë·∫ßu ti√™n.
    // N·∫øu ƒëang ·ªü gi·ªØa (v√≠ d·ª•: 2 + 1 = 3, 3 % 5 = 3) ‚Üí ph√°t b√†i k·∫ø ti·∫øp nh∆∞ b√¨nh th∆∞·ªùng.
    _currentIndex =
        (_currentIndex + 1) %
        playlist.length; // ph√°t h·∫øt b√†i trong danh s√°ch quay l·∫°i b√†i ƒë·∫ßu ti√™n
    _player.seek(
      Duration.zero,
      index: _currentIndex + 1,
    ); //chuy·ªÉn ƒë·∫øn b√†i h√°t m·ªõi ·ªü gi√¢y th·ª© 0
    //seek() l√† ƒë·ªÉ tua
  }

  //Navigation
  //ƒë·ªÉ t·∫°o giao di·ªán menu
  final List<Widget> _pages = [
    // To√†n b·ªô `Column` hi·ªán t·∫°i b·∫°n ƒëang d√πng => ƒë·∫∑t th√†nh 1 widget ri√™ng
    // Ho·∫∑c t·∫°m th·ªùi:
    Placeholder(), // Trang Th∆∞ vi·ªán
    Center(child: Text('kh√°m ph√°')),
    Music_Chart(playlist: [], index: 0),
    Center(child: Text('Ph√≤ng nh·∫°c')),
    Center(child: Text('C√° nh√¢n')),
    Center(child: Text('C√° nh√¢n')),
  ];
  // VoidCallback onTap, t·∫°o n√∫t (h√†nh ƒë·ªông b·∫•m trong navigation)
  Widget buildNavItem(IconData icon, String label, int index) {
    //icon: l√† bi·ªÉu t∆∞·ª£ng c·ªßa n√∫t
    //label l√† t√™n b√™n d∆∞·ªõi icon
    //index l√† s·ªë th·ª© t·ª± c·ªßa n√∫t
    //N·∫øu index b·∫±ng _selectedIndex th√¨ tab n√†y ƒëang ƒë∆∞·ª£c ch·ªçn
    final isSelected = _selectedIndex == index;
    //t·∫°o hi·ªáu ·ª©ng khi nh·∫•n v√†o
    return InkWell(
      onTap: () {
        // khi nh·∫•n v√†o n√∫t, c·∫≠p nh·∫≠t _selectedIndex ƒë·ªÉ hi·ªÉn th·ªã n√∫t ƒë∆∞·ª£c ch·ªçn.
        setState(() {
          //g·ªçi setState ƒë·ªÉ c·∫≠p nh·∫≠t _selectedIndex => widget build l·∫°i.
          if (index == 2) {
            // üëâ N·∫øu l√† n√∫t #Musicchart th√¨ m·ªü trang ri√™ng
            Navigator.push(
              context,
              MaterialPageRoute(
                builder:
                    (context) =>
                        Music_Chart(playlist: [], index: _selectedIndex),
              ),
            );
          } else {
            // üëâ C√°c tab kh√°c v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
            setState(() {
              _selectedIndex = index;
            });
          }
        });
      },
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          //icon
          Icon(icon, color: isSelected ? AppColors.menu3Color : Colors.black),
          SizedBox(height: 4),
          // text b√™n d∆∞·ªõi
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: isSelected ? AppColors.menu3Color : Colors.black,
              fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ],
      ),
    );
  }

  //l·∫•y danh s√°ch theo JSON
  List popularBooks = [];
  List books = [];
  ReadData() async {
    //DefaultAssetBundle.of(context).loadString(): load file JSON t·ª´ assets
    //Tr·∫£ v·ªÅ Future<Sting>, d√πng then ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu
    String popularJson = await DefaultAssetBundle.of(
      context,
    ).loadString("json/popularBooks.json");
    String booksJson = await DefaultAssetBundle.of(
      context,
    ).loadString("json/books.json");
    //th√¥ng b√°o d·ªØ li·ªáu thay ƒë·ªïi
    setState(() {
      popularBooks = json.decode(popularJson);
      books = json.decode(booksJson);
    });
  }

  //load d·ªØ li·ªáu v√† kh·ªüi t·∫°o c√°c controller khi widget ƒë∆∞·ª£c t·∫°o ra
  @override
  // kh·ªüi t·∫°o tr·∫°ng th√°i v√† logic c·∫ßn thi·∫øt  tr∆∞·ªõc khi widget ƒë∆∞·ª£c hi·ªÉn th·ªã l·∫ßn ƒë·∫ßu ti√™n
  // ƒê√¢y l√† n∆°i l√Ω t∆∞·ªüng ƒë·ªÉ:
  // ‚úÖ Kh·ªüi t·∫°o controller,
  // ‚úÖ G·ªçi h√†m t·∫£i d·ªØ li·ªáu,
  // ‚úÖ L·∫Øng nghe stream,
  // ‚úÖ Setup logic ban ƒë·∫ßu.
  Future<void> loadAllSongs() async {
    final allSongsRaw = await Supabase.instance.client.from('songs').select();
    final allSongs = List<Map<String, dynamic>>.from(allSongsRaw);

    setState(() {
      chillSongs =
          allSongs
              .where(
                (s) =>
                    (s['category']?.toString().toLowerCase().trim() ?? '') ==
                    'nh·∫°c chill',
              )
              .toList();
      lightSongs =
          allSongs
              .where(
                (s) =>
                    (s['category']?.toString().toLowerCase().trim() ?? '') ==
                    'nh·∫°c nh·∫π',
              )
              .toList();
      hotSongs =
          allSongs
              .where(
                (s) =>
                    (s['category']?.toString().toLowerCase().trim() ?? '') ==
                    'nh·∫°c hot',
              )
              .toList();
      loveSongs =
          allSongs
              .where(
                (s) =>
                    (s['category']?.toString().toLowerCase().trim() ?? '') ==
                    't√¨nh y√™u',
              )
              .toList();
      studentSongs =
          allSongs
              .where(
                (s) =>
                    (s['category']?.toString().toLowerCase().trim() ?? '') ==
                    'h·ªçc tr√≤',
              )
              .toList();
      lovelifeSongs =
          allSongs
              .where(
                (s) =>
                    (s['category']?.toString().toLowerCase().trim() ?? '') ==
                    'y√™u ƒë·ªùi',
              )
              .toList();
    });
  }

  void initState() {
    super.initState();
    selectedCategory = 'Nh·∫°c Nh·∫π'; // m·∫∑c ƒëinh m·ªü app s·∫Ω hi·ªán nh·∫°c Chill
    _songsFuture = Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', selectedCategory!); // ‚úÖ g√°n future hi·ªÉn th·ªã ban ƒë·∫ßu
    loadAllSongs();
    // L·∫Øng nghe xem ƒëang ph√°t hay kh√¥ng
    _player.playingStream.listen((isPlaying) {
      setState(() {
        _isPlaying = isPlaying;
      });
    });

    // L·∫Øng nghe b√†i h√°t hi·ªán t·∫°i c·ªßa b√†i h√°t
    _player.currentIndexStream.listen((index) {
      if (index != null) {
        setState(() {
          _currentIndex = index;
        });
      }
    });

    //h√†m t·∫£i d·ªØ li·ªáu
    _tabController = TabController(length: 6, vsync: this);
    _scrollController = ScrollController();
    ReadData(); //ƒê·ªçc d·ªØ li·ªáu c·∫•u h√¨nh/ng∆∞·ªùi d√πng
    loadSongs(); //	T·∫£i danh s√°ch b√†i h√°t cho t·ª´ng lo·∫°i
    loadChillSongs(); // ‚úÖ G·ªåI T·∫¢I D·ªÆ LI·ªÜU CHILL
    loadLightSongs(); // ‚úÖ G·ªåI T·∫¢I D·ªÆ LI·ªÜU NH·∫∏
    loadHotSongs(); // ‚úÖ G·ªåI T·∫¢I D·ªÆ LI·ªÜU HOT
    loadLoveSongs();
    loadStudentSongs();
    loadLoveLifeSongs();
  }

  //h√†m dispose() tr√°nh ch·∫°y ng·∫ßm
  @override
  void dispose() {
    _tabController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  // List theo supabase
  List chillSongs = [];
  List lightSongs = [];
  List hotSongs = [];
  List loveSongs = [];
  List studentSongs = [];
  List lovelifeSongs = [];
  //loadSongs() ƒë·ªÉ t·∫£i d·ªØ li·ªáu ·ªü songs t·ª´ Supabase
  //response: k·∫øt qu·∫£ tr·∫£ v·ªÅ
  String normalizeCategory(String? raw) {
    if (raw == null) return '';
    return raw
        .trim()
        .toLowerCase()
        .split(' ')
        .map((word) {
          if (word.isEmpty) return '';
          return word[0].toUpperCase() + word.substring(1);
        })
        .join(' ');
  }

  Future<void> loadSongs() async {
    List<Map<String, dynamic>> uniqueCategories = [];
    Set<String> seenCategories = {};

    for (var song in _songs) {
      if (!seenCategories.contains(song['category'])) {
        seenCategories.add(song['category']);
        uniqueCategories.add(song);
      }
    }
    try {
      final response =
          await Supabase.instance.client
              .from('songs')
              .select(); // Kh√¥ng c·∫ßn .execute()

      if (response != null) {
        final fetchedSongs = List<Map<String, dynamic>>.from(response);
        final grouped = groupSongsByCategory(fetchedSongs);
        setState(() {
          _songs = fetchedSongs;
          _groupedSongs = grouped;
          _categories = grouped.keys.toList();
        });
      }
    } catch (e) {
      print('L·ªói khi load b√†i h√°t: $e');
    }
  }

  //t·∫°o h√†m load t·ª´ Supabase
  // theo nh·∫°c chill ( g·ªçi b·∫±ng categoryid)
  Future<void> loadChillSongs() async {
    final response = await Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', 'Nh·∫°c Chill');
    if (response != null) {
      setState(() {
        chillSongs = response;
      });
    }
  }

  //theo nh·∫°c nh·∫π
  Future<void> loadLightSongs() async {
    final response = await Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', 'Nh·∫°c Nh·∫π');
    if (response != null) {
      setState(() {
        lightSongs = response;
      });
    }
  }

  // theo nh·∫°c Hot
  Future<void> loadHotSongs() async {
    final response = await Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', 'Nh·∫°c Hot');
    if (response != null) {
      setState(() {
        hotSongs = response;
      });
    }
  }

  //theo T√¨nh Y√™u
  Future<void> loadLoveSongs() async {
    final response = await Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', 'T√¨nh Y√™u');
    if (response != null) {
      setState(() {
        loveSongs = response;
      });
    }
  }

  //theo H·ªçc Tr√≤
  Future<void> loadStudentSongs() async {
    final response = await Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', 'H·ªçc Tr√≤');
    if (response != null) {
      setState(() {
        studentSongs = response;
      });
    }
  }

  //theo y√™u ƒë·ªùi
  Future<void> loadLoveLifeSongs() async {
    final response = await Supabase.instance.client
        .from('songs')
        .select()
        .eq('category', 'H·ªçc Tr√≤');
    if (response != null) {
      setState(() {
        studentSongs = response;
      });
    }
  }

  // ch·ªâ n√™n ƒë·ªÉ nh·ªØng g√¨ li√™n quan ƒë·∫øn UI: widget, ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã, c√°c gi√° tr·ªã ƒë√£ chu·∫©n b·ªã t·ª´ tr∆∞·ªõc
  @override
  //context ch·ª©a th√¥ng tin v·ªã tr√≠ widget trong c√¢y UI
  Widget build(BuildContext context) {
    return Container(
      color: Colors.white,
      //SafeArea ‚Üí ƒë·∫£m b·∫£o UI kh√¥ng tr√†n v√†o tai th·ªè/notch
      child: SafeArea(
        //Scaffold ‚Üí khung chu·∫©n Flutter: ch·ª©a body + bottomNavigationBar.
        child: Scaffold(
          body: Stack(
            children: [
              Column(
                children: [
                  //t√™n + logo + search + notifications
                  Container(
                    margin: const EdgeInsets.only(left: 3, right: 3),
                    //header
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            Container(
                              margin: const EdgeInsets.only(left: 20),
                              child: Row(
                                children: [
                                  //logo
                                  Container(
                                    decoration: BoxDecoration(
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.blue.withOpacity(0.2),
                                          blurRadius: 8,
                                          spreadRadius: 1,
                                          offset: Offset(0, 4),
                                        ),
                                      ],
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: ClipRRect(
                                      borderRadius: BorderRadius.circular(8),
                                      child: Image.asset(
                                        "assets/img/logo.jpg",
                                        width: 40,
                                        height: 40,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 0),
                                  //t√™n App
                                  TextButton(
                                    onPressed: () {},
                                    child: Text(
                                      "Th√†nh.Music",
                                      style: TextStyle(
                                        color: Colors.black,
                                        fontSize: 24,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            IconButton(
                              icon: Icon(Icons.search),
                              onPressed: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => const SearchPage(),
                                  ),
                                );
                                //x·ª≠ l√Ω n√∫t search
                              },
                            ),
                            IconButton(
                              icon: Icon(Icons.notifications),
                              onPressed: () {
                                // x·ª≠ l√Ω n√∫t th√¥ng b√°o
                              },
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  //VIEW
                  Expanded(
                    child: NestedScrollView(
                      controller: _scrollController,
                      headerSliverBuilder: (
                        BuildContext context,
                        bool isScroll,
                      ) {
                        return [
                          SliverAppBar(
                            pinned: true,
                            backgroundColor: Colors.white,
                            bottom: PreferredSize(
                              preferredSize: Size.fromHeight(
                                165,
                              ), // Chi·ªÅu cao l·ªõn h∆°n ƒë·ªÉ ch·ª©a ·∫£nh
                              child: FutureBuilder(
                                future: Supabase.instance.client
                                    .from('songs')
                                    .select()
                                    .limit(40), // gi·ªõi h·∫°n theo s·ªë b√†i
                                builder: (context, snapshot) {
                                  if (!snapshot.hasData)
                                    return Center(
                                      child: CircularProgressIndicator(),
                                    );
                                  final data = snapshot.data as List;
                                  final categories =
                                      <String, Map<String, dynamic>>{};
                                  for (var song in data) {
                                    final cat =
                                        (song['category'] ?? '')
                                            .toString()
                                            .toLowerCase()
                                            .trim();
                                    if (!categories.containsKey(cat)) {
                                      categories[cat] =
                                          song; // ch·ªâ l·∫•y b√†i ƒë·∫ßu ti√™n c·ªßa m·ªói lo·∫°i
                                    }
                                  }
                                  final uniqueSongs =
                                      categories.values.toList();

                                  final normalized = {
                                    'nh·∫°c chill': 'Nh·∫°c Chill',
                                    'nh·∫°c nh·∫π': 'Nh·∫°c Nh·∫π',
                                    'nh·∫°c hot': 'Nh·∫°c Hot',
                                    't√¨nh y√™u': 'T√¨nh Y√™u',
                                    'h·ªçc tr√≤': 'H·ªçc Tr√≤',
                                    'y√™u ƒë·ªùi': 'Y√™u ƒê·ªùi',
                                  };
                                  final categoryMap =
                                      <String, Map<String, dynamic>>{};
                                  for (var song in data) {
                                    final rawCat =
                                        (song['category'] ?? '')
                                            .toString()
                                            .toLowerCase()
                                            .trim();
                                    if (normalized.containsKey(rawCat) &&
                                        !categoryMap.containsKey(rawCat)) {
                                      categoryMap[rawCat] = song;
                                    }
                                  }
                                  //b·ªçc 3 ph·∫ßn
                                  return SizedBox(
                                    height:
                                        220, // TƒÉng m·ªôt ch√∫t n·∫øu mu·ªën ·∫£nh r√µ h∆°n
                                    child: ListView.builder(
                                      scrollDirection: Axis.horizontal,
                                      itemCount: uniqueSongs.length,
                                      itemBuilder: (context, index) {
                                        final song = uniqueSongs[index];
                                        final rawCat =
                                            (song['category'] ?? '')
                                                .toString()
                                                .toLowerCase()
                                                .trim();
                                        final displayCat =
                                            normalized[rawCat] ?? '';
                                        final String hexColor =
                                            song['color'] ?? '#D3D3D3';
                                        final Color colorLight = hexToColor(
                                          song['color_light'] ?? '#F0F0F0',
                                        );
                                        final Color colorMedium = hexToColor(
                                          song['color'] ?? '#AAAAAA',
                                        );
                                        final Color colorDark = hexToColor(
                                          song['color_dark'] ?? '#333333',
                                        );

                                        return GestureDetector(
                                          onTap: () {
                                            setState(() {
                                              selectedCategory = displayCat;
                                              _songsFuture = Supabase
                                                  .instance
                                                  .client
                                                  .from('songs')
                                                  .select()
                                                  .eq('category', displayCat)
                                                  .then(
                                                    (value) => List<
                                                      Map<String, dynamic>
                                                    >.from(value),
                                                  ); // ch·ªâ khi ch·∫Øc ch·∫Øn tr·∫£ v·ªÅ Future<List>
                                            });
                                          },
                                          child: Container(
                                            width: 150,
                                            margin: const EdgeInsets.symmetric(
                                              horizontal: 8,
                                              vertical: 10,
                                            ),
                                            padding: const EdgeInsets.all(8),
                                            decoration: BoxDecoration(
                                              gradient: LinearGradient(
                                                begin: Alignment.topCenter,
                                                end: Alignment.bottomCenter,
                                                colors: [
                                                  colorLight,
                                                  colorMedium,
                                                  colorDark,
                                                ],
                                                stops: [0.25, 0.65, 1.0],
                                              ),
                                              borderRadius:
                                                  BorderRadius.circular(12),
                                              border: Border.all(
                                                color: Colors.black12,
                                                width: 1,
                                              ),
                                              boxShadow: [
                                                BoxShadow(
                                                  color: Colors.black12,
                                                  blurRadius: 4,
                                                  offset: Offset(0, 2),
                                                ),
                                              ],
                                            ),
                                            child: Column(
                                              mainAxisAlignment:
                                                  MainAxisAlignment.start,
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.center,
                                              children: [
                                                Container(
                                                  padding:
                                                      const EdgeInsets.symmetric(
                                                        horizontal: 10,
                                                        vertical: 4,
                                                      ),
                                                  decoration: BoxDecoration(
                                                    color: Colors.white
                                                        .withOpacity(
                                                          0.2,
                                                        ), // n·ªÅn c·ªë ƒë·ªãnh
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                          8,
                                                        ),
                                                  ),
                                                  child: Text(
                                                    "C√ì TH·ªÇ B·∫†N TH√çCH",
                                                    style: const TextStyle(
                                                      fontSize: 9,
                                                      color: Colors.white,
                                                      fontWeight:
                                                          FontWeight.bold,
                                                      letterSpacing: 1.2,
                                                    ),
                                                  ),
                                                ),
                                                SizedBox(height: 4),
                                                ClipRRect(
                                                  borderRadius:
                                                      BorderRadius.circular(8),
                                                  child: Image.network(
                                                    song['cover'],
                                                    width: 155,
                                                    height: 134,
                                                    fit: BoxFit.cover,
                                                  ),
                                                ),
                                                SizedBox(height: 4),
                                                Text(
                                                  displayCat,
                                                  style: TextStyle(
                                                    fontSize: 13,
                                                    fontWeight: FontWeight.bold,
                                                    color: Colors.white,
                                                  ),
                                                  textAlign: TextAlign.center,
                                                ),
                                              ],
                                            ),
                                          ),
                                        );
                                      },
                                    ),
                                  );
                                },
                              ),
                            ),
                          ),
                          SliverPersistentHeader(
                            pinned: true,
                            delegate: _SliverHeaderDelegate(
                              minHeight: 48,
                              maxHeight: 48,
                              child: Container(
                                color: Colors.white,
                                padding: EdgeInsets.symmetric(horizontal: 16),
                                alignment: Alignment.center,
                                child: Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text(
                                      'G·ª£i √Ω b√†i h√°t',
                                      style: TextStyle(
                                        fontSize: 20,
                                        fontWeight: FontWeight.w900,
                                        color: Colors.black,
                                      ),
                                    ),
                                    Row(
                                      children: [
                                        OutlinedButton.icon(
                                          onPressed: () {
                                            // TODO: X·ª≠ l√Ω ph√°t t·∫•t c·∫£
                                          },
                                          icon: Icon(
                                            Icons.play_arrow,
                                            color: Colors.black,
                                            size: 22,
                                          ),
                                          // theo th·ªÉ lo·∫°i
                                          label: Text(
                                            selectedCategory ?? 'Th·ªÉ lo·∫°i',
                                            style: TextStyle(
                                              color: Colors.black,
                                            ),
                                          ),
                                          style: OutlinedButton.styleFrom(
                                            shape: StadiumBorder(),
                                            side: BorderSide(
                                              color: Colors.black12,
                                            ),
                                            backgroundColor: Colors.white,
                                            padding: EdgeInsets.symmetric(
                                              horizontal: 12,
                                              vertical: 0,
                                            ),
                                            minimumSize: Size(0, 36), // g·ªçn h∆°n
                                          ),
                                        ),
                                        SizedBox(width: 8),
                                        IconButton(
                                          onPressed: () {
                                            // TODO: Reload danh s√°ch b√†i h√°t
                                          },
                                          icon: Icon(Icons.refresh, size: 20),
                                          color: Colors.black,
                                          splashRadius: 20,
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ];
                      },
                      body: ListView(
                        children: [
                          if (selectedCategory == null)
                            Padding(
                              padding: const EdgeInsets.all(16),
                              child: Text("H√£y ch·ªçn m·ªôt th·ªÉ lo·∫°i ·ªü ph√≠a tr√™n."),
                            )
                          else
                            FutureBuilder<List<Map<String, dynamic>>>(
                              future: _songsFuture,
                              builder: (context, snapshot) {
                                if (snapshot.connectionState ==
                                    ConnectionState.waiting) {
                                  return SizedBox.shrink(); // Kh√¥ng hi·ªán g√¨ c·∫£ khi loading
                                }

                                if (snapshot.hasError) {
                                  return Center(
                                    child: Text('L·ªói khi t·∫£i d·ªØ li·ªáu'),
                                  );
                                }

                                final data = snapshot.data ?? [];
                                if (data.isEmpty) {
                                  return Center(
                                    child: Text(
                                      "Kh√¥ng c√≥ b√†i h√°t n√†o trong th·ªÉ lo·∫°i n√†y.",
                                    ),
                                  );
                                }

                                return ListView.builder(
                                  shrinkWrap: true,
                                  physics: NeverScrollableScrollPhysics(),
                                  itemCount: data.length,
                                  itemBuilder:
                                      (_, i) => buildSongItem(data[i], data, i),
                                );
                              },
                            ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),

          //footer
          bottomNavigationBar: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // ‚úÖ G·ªçi widget ri√™ng
              //miniPage
              ValueListenableBuilder<Map<String, dynamic>?>(
                valueListenable: AudioManager().currentSongNotifier,
                builder: (context, currentSong, _) {
                  return currentSong == null
                      ? const SizedBox.shrink()
                      : MiniPlayer(playlist: AudioManager().playlist);
                },
              ),
              //boton
              Container(
                height: 60,
                decoration: BoxDecoration(
                  color: Colors.white,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.white,
                      blurRadius: 5,
                      offset: Offset(0, -1),
                    ),
                  ],
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    buildNavItem(Icons.library_music, 'Th∆∞ vi·ªán', 0),
                    buildNavItem(Icons.explore, 'Kh√°m ph√°', 1),
                    buildNavItem(Icons.show_chart, '#Musicchart', 2),
                    buildNavItem(Icons.radio, 'Ph√≤ng nh·∫°c', 3),
                    buildNavItem(Icons.person, 'C√° nh√¢n', 4),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildSongItem(
    Map song,
    List<Map<String, dynamic>> playlist,
    int index,
  ) {
    return InkWell(
      onTap: () async {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder:
                (_) => PlayMusicPage(
                  title: song["title"],
                  artist: song["artist"],
                  coverUrl: song["cover"],
                  category: song["category"],
                  playlist: playlist,
                  index: index,
                ),
          ),
        );
      },
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              blurRadius: 2,
              offset: Offset(0, 0),
              color: Colors.white.withOpacity(0.3),
            ),
          ],
        ),
        padding: const EdgeInsets.all(8),
        child: Row(
          children: [
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
                image: DecorationImage(
                  image: NetworkImage(song["cover"]),
                  fit: BoxFit.cover,
                ),
              ),
            ),
            const SizedBox(width: 10),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  song["title"],
                  style: const TextStyle(
                    fontSize: 16,
                    fontFamily: "Avenir",
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  song["artist"],
                  style: const TextStyle(
                    fontSize: 12,
                    fontFamily: "Avenir",
                    color: Colors.black,
                  ),
                ),
                const SizedBox(height: 5),
                Container(
                  width: 50,
                  height: 20,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(3),
                    color: AppColors.menu3Color,
                  ),
                  alignment: Alignment.center,
                  child: const Text(
                    "love",
                    style: TextStyle(
                      fontSize: 12,
                      fontFamily: "Avenir",
                      color: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            const Spacer(),
            Align(
              alignment: Alignment.centerRight,
              child: IconButton(
                icon: const Icon(Icons.more_vert),
                onPressed: () {
                  // Hi·ªán popup menu ch·∫≥ng h·∫°n
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildMiniPlayer() {
    if (playlist.isEmpty) return const SizedBox.shrink();

    final song = playlist[_currentIndex]; // L·∫•y b√†i h√°t ƒëang ph√°t

    return GestureDetector(
      onTap: () {
        final indexInPlaylist = playlist.indexWhere(
          (s) => s['title'] == song['title'],
        );

        print("üîç ƒêang m·ªü b√†i: ${song['title']}");
        print("üéØ Index trong playlist: $indexInPlaylist");
        print("üìª Playlist g·ªìm: ${playlist.map((s) => s['title'])}");

        Navigator.push(
          context,
          MaterialPageRoute(
            builder:
                (_) => PlayMusicPage(
                  title: song["title"],
                  artist: song["artist"],
                  coverUrl: song["cover"],
                  category: song["category"],
                  playlist: List<Map<String, dynamic>>.from(playlist),
                  index: indexInPlaylist >= 0 ? indexInPlaylist : 0,
                ),
          ),
        );
      },
      ////////mini page
      child: MiniPlayer(playlist: playlist),
    );
  }
}
